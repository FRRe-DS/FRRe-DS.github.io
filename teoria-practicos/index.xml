<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Teoría Trabajos Prácticos on FRRe - Desarrollo de Software</title><link>https://frre-dacs.github.io/teoria-practicos/</link><description>Recent content in Teoría Trabajos Prácticos on FRRe - Desarrollo de Software</description><generator>Hugo -- gohugo.io</generator><language>ES-ar</language><atom:link href="https://frre-dacs.github.io/teoria-practicos/index.xml" rel="self" type="application/rss+xml"/><item><title>Sistemas de Control de Versiones</title><link>https://frre-dacs.github.io/teoria-practicos/versionado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/versionado/</guid><description>¿Qué es un Sistema de control de versiones? Un Sistema de Versionado de Código (SVC) en abstracto es lo que nos permite compartir el código fuente de nuestros desarrollos y a la vez mantener un registro de los cambios por los que va pasando.
Habitualmente para gestionar las distintas versiones por las que pasa el código fuente de las aplicaciones, lo que nos permite saber quién realiza qué cambios y poder volver a ellos en un determinado momento.</description></item><item><title>Patrones de Acceso a Datos</title><link>https://frre-dacs.github.io/teoria-practicos/patrones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/patrones/</guid><description>Patrón Repositorio El patrón repositorio consiste en separar la lógica que recupera los datos y los asigna a un modelo de entidad de la lógica de negocios que actúa sobre el modelo, esto permite que la lógica de negocios sea independiente del tipo de dato que comprende la capa de origen de datos, en pocas palabras un repositorio media entre el dominio y las capas de mapeo de datos, actuando como una colección de objetos de dominio en memoria</description></item><item><title>Principios SOLID</title><link>https://frre-dacs.github.io/teoria-practicos/solid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/solid/</guid><description>¿Qué son los Principios SOLID? Son un conjunto de principios aplicables a la Programación Orientada a Objetos que, si los usas correctamente, te ayudarán a escribir software de calidad en cualquier lenguaje de programación orientada a objetos. Gracias a ellos, crearás código que será más fácil de leer, testear y mantener.
Los principios en los que se basa SOLID son los siguientes:
● Principio de Responsabilidad Única (Single Responsibility Principle)</description></item><item><title>REST</title><link>https://frre-dacs.github.io/teoria-practicos/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/rest/</guid><description>REpresentational State Transfer Transferencia de estados representacionales REST es una interfaz para conectar varios sistemas basados en el protocolo HTTP y nos sirve para obtener y generar datos y operaciones, devolviendo esos datos en formatos muy específicos, como XML y JSON.
REST se apoya en HTTP
Los verbos que utiliza son exactamente los mismos, con ellos se puede hacer GET, POST, PUT y DELETE.
Ver presentación: REST API
Para que una API sea considerada como REST debe superar las siguientes características arquitectónicas ● Uso de una interfaz uniforme</description></item><item><title>MVC</title><link>https://frre-dacs.github.io/teoria-practicos/mvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/mvc/</guid><description>¿Qué es MVC (Modelo Vista Controlador)? Es un patrón de diseño de arquitectura de software.
Ver presentaciones:
Patrón MVC ASP.NET MVC Modelo El modelo contiene principalmente las entidades que representan el dominio, la logica de negocio y los mecanismos de persistencia de nuestro sistema.
Vista En la vista encontraremos los componentes responsables de generar la interfaz con el exterior, por regla general, aunque no exclusivamente, el UI de nuestra aplicación.</description></item><item><title>Frameworks en Node.js</title><link>https://frre-dacs.github.io/teoria-practicos/node-frameworks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/node-frameworks/</guid><description>Express.js Express.js es el framework de Node.js más utilizado. Es un framework minimalista que permite crear aplicaciones Web y APIs. Posee una arquitectura rápida, robusta y asíncrona.
Su API permite a los usuarios configurar rutas para enviar/recibir peticiones entre el front-end y la base de datos (actuando como un marco de trabajo del servidor HTTP). Una buena ventaja de express es que soporta muchos otros paquetes y otros motores de plantillas como Pug, Mustache, EJS y muchos más.</description></item></channel></rss>