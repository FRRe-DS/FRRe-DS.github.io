<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fundamentación on FRRe - Desarrollo de Software</title><link>https://frre-dacs.github.io/</link><description>Recent content in Fundamentación on FRRe - Desarrollo de Software</description><generator>Hugo -- gohugo.io</generator><language>ES-ar</language><atom:link href="https://frre-dacs.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Trabajo Práctico Nivelador</title><link>https://frre-dacs.github.io/trabajos-practicos/tp_00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/trabajos-practicos/tp_00/</guid><description>Objetivos Que el alumno logre:
Adquirir habilidades de programación orientada a objetos. Modalidad de Desarrollo Individual.
Formato de Presentación En pepel.
Fecha de Entrega 28/043/2023 Contenido del Informe de Presentación Formato de hoja: A4. Aspectos de Evaluación Cumplimiento de actividades propuestas y fechas indicadas. Programación Orientada a Objectos Definir Clases y Objectos 1 - Agenda Personal
Una agenda personal permita registrar reuniones en las que el usuario va a participar.</description></item><item><title>Trabajo Práctico Número 1</title><link>https://frre-dacs.github.io/trabajos-practicos/tp_01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/trabajos-practicos/tp_01/</guid><description>Objetivos Que el alumno logre:
Adquirir habilidades y conocimiento de las principales características y capacidades de las diferentes tecnologías y herramientas para el desarrollo y construcción de aplicaciones informáticas actuales. Aplicar criterios de selección de software en base a características y necesidades de un sistema. Adquirir habilidades en búsqueda y organización de información. Modalidad de Desarrollo Grupal: en grupos de entre 4 y 7 alumnos.
Formato de Presentación Individual con coloquio en máquina e informe impreso y digital (formato .</description></item><item><title>Trabajo Práctico Número 2</title><link>https://frre-dacs.github.io/trabajos-practicos/tp_02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/trabajos-practicos/tp_02/</guid><description>Objetivos Que el alumno logre:
Adquirir habilidades y conocimiento de las principales características y capacidades de las diferentes tecnologías y herramientas para el desarrollo y construcción de aplicaciones informáticas actuales. Aplicar criterios de selección de software en base a características y necesidades de un sistema. Adquirir habilidades en búsqueda y organización de información. Modalidad de Desarrollo Grupal: en grupos de entre 4 y 7 alumnos.
Formato de Presentación Individual con coloquio en máquina e informe impreso y digital (formato .</description></item><item><title>Object Relational Mapping</title><link>https://frre-dacs.github.io/teoria-practicos/acceso-datos/orm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/acceso-datos/orm/</guid><description>¿Qué es una ORM? Una ORM procede de las siglas (Object Relational Mapping). Es un modelo de programación que transforma las tablas de las bases de datos en entidades para simplificar enormemente la tarea del programador. El trabajo deja de ser manual ya que el ORM lo realizara de forma independiente de la base de datos. Además, gracias al mapeo automático podrás cambiar el motor de la base de datos fácilmente.</description></item><item><title>Sistemas de Control de Versiones</title><link>https://frre-dacs.github.io/teoria-practicos/versionado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/versionado/</guid><description>¿Qué es un Sistema de control de versiones? Un Sistema de Versionado de Código (SVC) en abstracto es lo que nos permite compartir el código fuente de nuestros desarrollos y a la vez mantener un registro de los cambios por los que va pasando.
Habitualmente para gestionar las distintas versiones por las que pasa el código fuente de las aplicaciones, lo que nos permite saber quién realiza qué cambios y poder volver a ellos en un determinado momento.</description></item><item><title>Trabajo Práctico Final - Año 2021</title><link>https://frre-dacs.github.io/trabajos-practicos/tp-final/2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/trabajos-practicos/tp-final/2021/</guid><description>Objetivos Que el alumno logre:
Adquirir habilidades prácticas sobre los conocimientos impartidos en las principales tecnologías y herramientas para el desarrollo y construcción de aplicaciones informáticas actuales. Modalidad de Desarrollo Grupal: en grupos de entre 4 y 7 alumnos.
Formato de Presentación Individual con coloquio en máquina e informe impreso y digital (formato .odt .doc .pdf).
Fecha de Entrega 02/07/2021 Contenido del Informe de Presentación Formato de hoja: A4. Carátula: Nombre de la materia, año de cursado, número de grupo, nombre completo de los integrantes.</description></item><item><title>UNIDAD 1 - Arquitectura de aplicaciones multicapa.</title><link>https://frre-dacs.github.io/programa-analitico/unidad-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/programa-analitico/unidad-01/</guid><description> Arquitectura de aplicaciones multicapa Repaso de las arquitecturas más comunes en sistemas distribuidos. Dos y tres capas. Modelo de tres capas, la tendencia actual. Modelo distribuido y de microservices, introducción. Publicadores y consumidores de datos. Patrones de diseño en arquitecturas distribuidas, Event-Sourcing.
Objetivos específicos Discriminar las diferencias conceptuales entre las distintas tecnologías existentes.</description></item><item><title>Object Document Mapper</title><link>https://frre-dacs.github.io/teoria-practicos/acceso-datos/odm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/acceso-datos/odm/</guid><description>Introducción Cuando queremos guardar en una DB info solemos usar su lenguaje propio dentro de nuestro código. Pero a veces tenemos que hacer todo un esfuerzo para que este lenguaje de consulta funcione dentro de nuestro código. Esto se puede evitar con un orm, o un ODM en el caso de una base de datos no relacional como MongoDB. El ODM hace de intermediario entre la app y la DB así tenemos métodos propios que hacen todo el trabajo.</description></item><item><title>Trabajo Práctico Final - Año 2022</title><link>https://frre-dacs.github.io/trabajos-practicos/tp-final/2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/trabajos-practicos/tp-final/2022/</guid><description>Objetivos Que el alumno logre:
Adquirir habilidades prácticas sobre los conocimientos impartidos en las principales tecnologías y herramientas para el desarrollo y construcción de aplicaciones informáticas actuales. Modalidad de Desarrollo Grupal: en grupos de entre 4 y 7 alumnos.
Formato de Presentación Individual con coloquio en máquina e informe impreso y digital (formato .odt .doc .pdf).
Fecha de Entrega 01/07/2022 Contenido del Informe de Presentación Formato de hoja: A4. Carátula: Nombre de la materia, año de cursado, número de grupo, nombre completo de los integrantes.</description></item><item><title>UNIDAD 2 - Herramientas de soporte al proceso de desarrollo</title><link>https://frre-dacs.github.io/programa-analitico/unidad-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/programa-analitico/unidad-02/</guid><description>Herramientas de soporte al proceso de desarrollo Entornos integrados de desarrollo. Ciclos de vida de una aplicación. Servicios de los entornos de desarrollo integrados (IDE) modernos. Compiladores just-in-time. Máquinas virtuales, containers y virtualización a nivel SO. Capa de acceso a datos. Framework de persistencia.
Objetivos específicos Seleccionar y aplicar correctamente las tecnologías existentes en el mercado. Que sepa analizar el contexto del problema y resuelva el mismo con la mejor herramienta posible.</description></item><item><title>Patrones de Acceso a Datos</title><link>https://frre-dacs.github.io/teoria-practicos/patrones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/patrones/</guid><description>Patrón Repositorio El patrón repositorio consiste en separar la lógica que recupera los datos y los asigna a un modelo de entidad de la lógica de negocios que actúa sobre el modelo, esto permite que la lógica de negocios sea independiente del tipo de dato que comprende la capa de origen de datos, en pocas palabras un repositorio media entre el dominio y las capas de mapeo de datos, actuando como una colección de objetos de dominio en memoria</description></item><item><title>UNIDAD 3 - Aplicaciones orientadas a servicios</title><link>https://frre-dacs.github.io/programa-analitico/unidad-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/programa-analitico/unidad-03/</guid><description> Aplicaciones orientadas a servicios Servicios de BackEnd y servidores de aplicaciones. Modelo REST. Frameworks de persistencia. Evolución de los sistemas distribuidos. SOLID. SRP: The Single Responsability Principle. OCP: The Open-Close Principle. LSP: The Liskov Substitution Principle. ISP: The Interface Segregation Principle. DIP: The Dependency Inversion Principle. Componentes, Acoplamiento y Cohesión.
Objetivos específicos Dominar las bases de las aplicaciones basadas en internet.</description></item><item><title>Principios SOLID</title><link>https://frre-dacs.github.io/teoria-practicos/solid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/solid/</guid><description>¿Qué son los Principios SOLID? Son un conjunto de principios aplicables a la Programación Orientada a Objetos que, si los usas correctamente, te ayudarán a escribir software de calidad en cualquier lenguaje de programación orientada a objetos. Gracias a ellos, crearás código que será más fácil de leer, testear y mantener.
Los principios en los que se basa SOLID son los siguientes:
● Principio de Responsabilidad Única (Single Responsibility Principle)</description></item><item><title>UNIDAD 4 - Programación de la interfaz de usuario</title><link>https://frre-dacs.github.io/programa-analitico/unidad-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/programa-analitico/unidad-04/</guid><description> Programación de la interfaz de usuario Desarrollo con clientes livianos, el rol de los navegadores de internet en las tecnologías actuales. HTML. Arquitectura del servidor HTTP. Guiones (scripts). Scripting de lado del servidor. Scripting del lado del cliente. Lenguajes de scripting, generalidades.
Objetivos específicos Diseñar un sistema distribuido basado en redes públicas</description></item><item><title>REST</title><link>https://frre-dacs.github.io/teoria-practicos/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/rest/</guid><description>REpresentational State Transfer Transferencia de estados representacionales REST es una interfaz para conectar varios sistemas basados en el protocolo HTTP y nos sirve para obtener y generar datos y operaciones, devolviendo esos datos en formatos muy específicos, como XML y JSON.
REST se apoya en HTTP
Los verbos que utiliza son exactamente los mismos, con ellos se puede hacer GET, POST, PUT y DELETE.
Ver presentación: REST API
Para que una API sea considerada como REST debe superar las siguientes características arquitectónicas ● Uso de una interfaz uniforme</description></item><item><title>UNIDAD 5 - Pruebas unitarias</title><link>https://frre-dacs.github.io/programa-analitico/unidad-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/programa-analitico/unidad-05/</guid><description> Pruebas unitarias Conceptos. Stubs, Mocks, Spies y Dummies. Cobertura. Statement Coverage. Decision Coverage. Branch Coverage. Toggle Coverage. FSM Coverage. Herramientas. Pruebas de integración. Pruebas de Sistema. Pruebas de Aceptación.
Objetivos específicos: Familiarizarse con las grandes familias de plataformas tecnológicas en uso en la industria mundial.</description></item><item><title>MVC</title><link>https://frre-dacs.github.io/teoria-practicos/mvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/mvc/</guid><description>¿Qué es MVC (Modelo Vista Controlador)? Es un patrón de diseño de arquitectura de software.
Ver presentaciones:
Patrón MVC ASP.NET MVC Modelo El modelo contiene principalmente las entidades que representan el dominio, la logica de negocio y los mecanismos de persistencia de nuestro sistema.
Vista En la vista encontraremos los componentes responsables de generar la interfaz con el exterior, por regla general, aunque no exclusivamente, el UI de nuestra aplicación.</description></item><item><title>UNIDAD 6 - Desarrollo Seguro</title><link>https://frre-dacs.github.io/programa-analitico/unidad-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/programa-analitico/unidad-06/</guid><description> Desarrollo Seguro Principios y Buenas Prácticas. Vulnerabilidades web. Ciclo de desarrollo de software seguro. Modelo OSWAP. SQL Injection. XSS (Cross Site Scripting). Seguridad en Microservicios, APIs, Autenticación, Sesiones. Web Tokens, Introducción a OAuth 2.
Objetivos específicos Diseñar un sistema basado en servicios en la nube.</description></item><item><title>Frameworks en Node.js</title><link>https://frre-dacs.github.io/teoria-practicos/node-frameworks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://frre-dacs.github.io/teoria-practicos/node-frameworks/</guid><description>Express.js Express.js es el framework de Node.js más utilizado. Es un framework minimalista que permite crear aplicaciones Web y APIs. Posee una arquitectura rápida, robusta y asíncrona.
Su API permite a los usuarios configurar rutas para enviar/recibir peticiones entre el front-end y la base de datos (actuando como un marco de trabajo del servidor HTTP). Una buena ventaja de express es que soporta muchos otros paquetes y otros motores de plantillas como Pug, Mustache, EJS y muchos más.</description></item></channel></rss>